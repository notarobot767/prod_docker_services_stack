user  nginx;
#worker_processes  auto;
worker_processes  8;
pid /var/run/nginx.pid;

error_log /dev/stdout;
# send errors to console
#error_log /dev/null;
# send errors to null
#error_log /var/log/nginx/error.log notice;
# send erros to log file

events { worker_connections  1024; }

# http://nginx.org/en/docs/http/ngx_http_core_module.html
http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  #resolver 127.0.0.11;

  log_format main '~$nginx_version~'
                  '$remote_addr~$remote_port~'
                  '$server_addr~$server_port~'
                  '$time_iso8601~'
                  '$request_method~$scheme~$host~$uri~$query_string~'
                  '$server_protocol~$status~$bytes_sent~$content_type~'
                  '$ssl_cipher~$ssl_protocol~$ssl_session_id~'
                  '$http_referer~'
                  '$http_user_agent~';

  access_log syslog:server=10.0.20.30:514,facility=local7,tag=nginx,severity=info main;
  #access_log  /dev/stdout;
  #access_log  /dev/null;
  #access_log  /var/log/nginx/access.log;

  sendfile on;
  # Sendfile copies data between one FD and other from within the kernel,
  # which is more efficient than read() + write(). Default is off.

  tcp_nopush on;
  # Causes nginx to attempt to send its HTTP response head in one packet,
  # instead of using partial frames. Default is 'off'.

  tcp_nodelay on;

  server_tokens off;
  # hides nginx version

  proxy_http_version  1.1;

  include /etc/nginx/custom_confs/gzip.conf;
  include /etc/nginx/custom_confs/https.conf;
  include /etc/nginx/custom_confs/proxy_common.conf;
  include /etc/nginx/custom_confs/docker_dns.conf;

  # prevent malicious resource exhaustion by lowering buffers
  # but seemed to break apps
  #client_body_buffer_size 1k;
  #client_max_body_size 1k;
  #client_header_buffer_size 1K;
  #large_client_header_buffers 2 1k;

  include /etc/nginx/conf.d/*.conf;
}