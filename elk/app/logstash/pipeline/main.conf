input {
  #https://www.elastic.co/guide/en/logstash/current/plugins-inputs-syslog.html
  beats {
    port => 514
    type => "cisco-syslog"
  }
  beats {
    port => 515
    type => "bind9"
  }
  beats {
    port => 516
    type => "endlessh"
  }
  beats {
    port => 517
    type => "tftp"
  }

}

filter {
  ##########################
  #Cisco Syslog            #
  ##########################
  # expecting following cisco configs for logging:
  #
  # logging source-interface [loopback]
  # service timestamps log datetime localtime msec show-timezone year
  # ip ssh logging events
  # login on-failure log
  # login on-success log
  # archive
  #   log config
  #   hidekeys
  #   notify syslog
  #   logging enable
  # logging host 10.0.20.30 transport udp port 514 session-id hostname sequence-num-session
  #########
  if [type] == "cisco-syslog" {
    grok {
      patterns_dir => ["/usr/share/logstash/pipeline/patterns"]

      #cisco syslog
      match => { "message" => '<%{NUMBER}>%{NUMBER}: \[%{NOTSPACE:facility} s_sn="%{NUMBER:seq_no}" s_id ="%{HOSTNAME:hostname}:%{NUMBER:dst.port}"]: \*?%{SYSLOG_YEAR:apptimestamp}: %%{FACILITY_SEVERITY_CODE}: %{GREEDYDATA:syslog_msg}' }
      
      #basic syslog
      match => { "message" => "%{SYSLOGTIMESTAMP}%{GREEDYDATA:syslog_message}" }

      #Else
      match => { "message" => "%{GREEDYDATA:syslog_message}" }

      add_field => [ "logstash_received_at", "%{@timestamp}" ]
      remove_field => ["day", "message", "month", "time", "year"]
    }

    #extract user if exist for logins
    grok {
      match => { "syslog_msg" => "User:%{NOTSPACE:cisco.user}" }
    }

    #extract command if exist for executed commands
    grok {
      match => { "syslog_msg" => "User:\S+\s*logged command:%{GREEDYDATA:cisco.command}" }
    }

    #break out origin host:port into separate fields
    grok {
      match => { "[log][source][address]" => "%{IP:src.ip}:%{POSINT:src.port}" }
      remove_field => ["[log][source][address]"]
    }
  }

  #tftp server logs
  ##########################
  if [type] == "tftp" {
    grok {
      patterns_dir => ["/usr/share/logstash/pipeline/patterns"]

      #file read/write
      match => { "message" => "%{SYSLOGTIMESTAMP} tftp %{WORD:SOURCE}.%{LOGLEVEL:LOGLEVEL} in.tftpd\[%{NUMBER}\]: %{WORD:OP} from %{IP:SRC_IP} filename %{FILE:FILE}" }
      
      #basic syslog
      match => { "message" => "%{SYSLOGTIMESTAMP} tftp %{WORD:SOURCE}.%{LOGLEVEL:LOGLEVEL} %{GREEDYDATA:SYSLOG_MSG}" }

      #Else
      match => { "message" => "%{GREEDYDATA:syslog_message}" }
      
      add_field => [ "received_at", "%{@timestamp}" ]
    }
  }
  
  #endlessh logs
  ##########################
  if [type] == "endlessh" {
    grok {
      patterns_dir => ["/usr/share/logstash/pipeline/patterns"]

      #accept statements
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp_hst}%{SPACE}%{TIMESTAMP_ISO8601:timestamp_zulu}%{SPACE}%{WORD:method}%{SPACE}host=::ffff:%{IP:address}%{SPACE}port=%{NUMBER:port}%{SPACE}fd=%{NUMBER:fd}%{SPACE}time=%{NUMBER:duration}%{SPACE}bytes=%{NUMBER:bytes}%{GREEDYDATA}" }
      
      #close statements
      match => { "message" => "%{TIMESTAMP_ISO8601}%{SPACE}%{TIMESTAMP_ISO8601:apptimestamp}%{SPACE}%{WORD:method}%{SPACE}host=::ffff:%{IP:address}%{SPACE}port=%{NUMBER:port}%{SPACE}fd=%{NUMBER:fd}%{SPACE}%{GREEDYDATA}" }
      
      add_field => [ "received_at", "%{@timestamp}" ]

      remove_field => ["message"]
    }
  }

  #bind9 logs
  ##########################
  if [type] == "bind9" {
    grok {
      patterns_dir => ["/usr/share/logstash/pipeline/patterns"]

      #query
      match => { "message" => "%{BIND9_TIMESTAMP:timestamp_hst} %{WORD:category}: %{LOGLEVEL:severity}: client @%{NOTSPACE:client} %{IP:src_ip}#%{NUMBER:src_port} %{NOTSPACE} query: %{NOTSPACE:query} IN %{WORD:record} (%{NOTSPACE:flags} )?\(%{IP:srv_ip}\)" }
      
      #every else that's not a query
      match => { "message" => "%{BIND9_TIMESTAMP:timestamp_hst} %{WORD:category}: %{LOGLEVEL:severity}: %{GREEDYDATA:syslog_message}" }

      #all else
      match => { "message" => "%{GREEDYDATA:syslog_message}" }
      
      add_field => [ "received_at", "%{@timestamp}" ]
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{[type]}-%{+YYYY.MM.dd}"
    action => "create"
  }
  stdout {
    codec => rubydebug
  }
}